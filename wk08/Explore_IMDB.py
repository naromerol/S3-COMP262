#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
pd.__version__


# In[2]:


#Read the CSV File into df
df = pd.read_csv('movies_metadata.csv', low_memory=False)

#We will find out what the following code does a little later!
df.head()


# In[3]:


#Output the type of df
type(df)


# In[4]:


#Output the shape of df
df.shape


# In[5]:


#Output the columns of df
df.columns


# In[7]:


#Select the second movie in df
second = df.iloc[1]
second


# In[6]:


#Change the index to the title
df = df.set_index('title')

#Access the movie with title 'Jumanji'
jum = df.loc['Jumanji']
jum


# In[7]:


df = df.reset_index()


# In[8]:


#Create a smaller dataframe with a subset of all features
small_df = df[['title', 'release_date', 'budget', 'revenue', 'runtime', 'genres']]

#Output only the first 5 rows of small_df
small_df.head()


# In[9]:


#Display the first 15 rows
small_df.head(15)


# In[10]:


#Get information of the data types of each feature
small_df.info()


# In[18]:


#will give an error
small_df['budget'].astype('float')


# In[24]:


#Import the numpy library 
import numpy as np

#Function to convert to float manually
def to_float(x):
    try:
        x = float(x)
    except: 
        x = np.nan
    return x

#Apply the to_float function to all values in the budget column
small_df['budget'] = small_df['budget'].apply(to_float)

#Try converting to float using pandas astype
small_df['budget'] = small_df['budget'].astype('float')

#Get the data types for all features
small_df.info()


# In[25]:


#Convert release_date into pandas datetime format
small_df['release_date'] = pd.to_datetime(small_df['release_date'], errors='coerce')

#Extract year from the datetime
small_df['year'] = small_df['release_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)


# In[26]:


#Sort DataFrame based on release year
small_df = small_df.sort_values('year')

small_df.head()


# In[27]:


#Sort Movies based on revenue (in descending order)
small_df = small_df.sort_values('revenue', ascending=False)

small_df.head()


# In[28]:


#Select only those movies which earned more than 1 billion
new = small_df[small_df['revenue'] > 1e9]

new


# In[29]:


#Select only those movies which earned more than 1 billion and spent less than 150 million

new2 = small_df[(small_df['revenue'] > 1e9) & (small_df['budget'] < 1.5e8)]
new2


# In[30]:


type(small_df['year'])


# In[31]:



#Get the runtime Series object
runtime = small_df['runtime']

#Print the longest runtime of any movie
print(runtime.max())

#Print the shortest runtime of any movie
print(runtime.min())


# In[32]:


#Get the budget Series object
budget = small_df['budget']

#Print the mean budget of the movies
print(budget.mean())

#Print the median budget of the movies
print(budget.median())


# In[33]:


#Get the revenue Series object
revenue = small_df['revenue']

#Revenue generated by the 90th percentile movie
revenue.quantile(0.90)


# In[47]:


#Get number of movies released each year
small_df['year'].value_counts()


# In[ ]:




